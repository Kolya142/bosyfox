const canvas = document.getElementById("canvas");
const ruler = document.getElementById("ruler");
const actionsel = document.getElementById("actions");
canvas.width = window.innerWidth;
canvas.height = window.innerHeight;
const ctx = canvas.getContext("2d");

canvas.style.cursor = "none";

def print (console.log)

struct Vec2 {
    x y
}

struct Object {
    style color type is_tool
}

struct Circle extends Object {
    a r
}
struct Rect extends Object {
    a b
}
struct Line extends Object {
    a b
}
struct Ruler extends Object {
    a b
}
struct Triangle extends Object {
    a b c
}
struct Poly extends Object {
    points
}

fn prompt(message, defaultValue = "") {
    return new Promise((resolve) => {
	setTimeout(() => {
	    const modal = document.getElementById("prompt-modal");
	    const input = document.getElementById("prompt-input");
	    const messageBox = document.getElementById("prompt-message");

	    input.value = defaultValue;
	    messageBox.textContent = message;
	    modal.style.display = "block";
	    input.focus();
	    canvas.blur();

	    fn closePrompt(result) {
		modal.style.display = "none";
		resolve(result);
	    }

	    document.getElementById("prompt-ok").onclick = () => closePrompt(input.value);
	    document.getElementById("prompt-cancel").onclick = () => closePrompt(null);
	    input.onkeydown = (e) => {
		if (e.key == "Enter") closePrompt(input.value);
		if (e.key == "Escape") closePrompt(null);
	    };
	}, 100);
    });
}


var objects = [];
var draw_style = "stroke";
var curr_style = "stroke";
var curr_color = "red";
var curr_fig = null;
var curr_poses = [];
var mouse_pos = Vec2(0, 0);
var is_mouse_over_canvas = false;
var grid = 0;
var selected = 0;
var background_img = null;
var plugins = [];

fn loadPlugin(file) {
    import(file).then(mod => {
	const m = mod.load(file);
	print(m);
	plugins.push(m);
    });
}

fn setFig(fig) {
    curr_fig = fig;
}

fn redraw() {
    clear();
    if (background_img) {
        ctx.drawImage(background_img, 0, 0, canvas.width, canvas.height);
    }
    for (let i = 0; i < plugins.length; ++i) {
	if (plugins[i] && plugins[i].redrawStart) plugins[i].redrawStart(object);
    }
    for (let i = 0; i < objects.length; ++i) {
        const object = objects[i];
        const is_selected = i == selected;
        setColor(object.color);
        draw_style = object.style;
        if (is_selected) setColor("#50FF10");
        match (object.type) {
            "rect" {
                drawRect(object.a, object.b);
            }
            "line" {
                drawLine(object.a, object.b);
            }
	    "circle" {
	        drawCircle(object.a, object.r);
	    }
	    "triangle" {
	        drawTriangle(object.a, object.b, object.c);
	    }
	    "polygon" {
		drawPoly(object.points);
	    }
	    "ruler" {
	        drawLine(object.a, object.b);
		drawText(Vec2(object.a.x/2+object.b.x/2, object.a.y/2+object.b.y/2), "Ruler: " + dist(object.a, object.b));
	    }
	    _ {
		for (let i = 0; i < plugins.length; ++i) {
		    if (plugins[i] && plugins[i].redraw) {plugins[i].redraw(object);}
		}
	    }
        }
	
    }
    for (let i = 0; i < plugins.length; ++i) {
	if (plugins[i] && plugins[i].redrawEnd) {plugins[i].redrawEnd(object);}
    }
    setColor("#00000080");
    draw_style = "stroke";
    if (grid) {
	for (let i = 0; i < canvas.width; i += grid) {
	    drawLine(Vec2(i, 0), Vec2(i, canvas.height));
	}
	for (let j = 0; j < canvas.height; j += grid) {
	    drawLine(Vec2(0, j), Vec2(canvas.width, j));
	}
    }
}

fn loadBackground() {
    const input = document.createElement("input");
    input.type = "file";
    input.accept = "image/*";
    input.onchange = e => {
        const file = e.target.files[0];
        const reader = eval("new FileReader()");
        reader.onload = function(evt) {
            const img = eval("new Image()");
            img.onload = () => {
                background_img = img;
                redraw();
            };
            img.src = evt.target.result;
        };
        reader.readAsDataURL(file);
    };
    input.click();
}

fn show() {
    if (!curr_poses.length) return;
    setColor("#00000080");
    draw_style = "stroke";
    for (let i = 0; i < curr_poses.length; ++i) {
	drawCircle(curr_poses[i], 3);
    }
    setColor(curr_color);
    draw_style = curr_style;
    const c_poses = [...curr_poses];
    c_poses.push(mouse_pos);
    match (curr_fig) {
        "rect" {
	    for (let i = 0; i < c_poses.length - 1; i += 2) {
            	drawRect(c_poses[i], Vec2(c_poses[i + 1].x - c_poses[i].x, c_poses[i + 1].y - c_poses[i].y));
            }
        }
        "line" {
	    for (let i = 0; i < c_poses.length - 1; i += 2) {
            	drawLine(c_poses[i], c_poses[i + 1]);
            }
        }
        "circle" {
	    for (let i = 0; i < c_poses.length - 1; i += 2) {
            	drawCircle(c_poses[i], dist(c_poses[i + 1], c_poses[i]));
            }
        }
        "polygon" {
	    drawPoly(c_poses);
        }
	"ruler" {
	    for (let i = 0; i < c_poses.length - 1; i += 2) {
	        drawLine(c_poses[i], c_poses[i + 1]);
		drawText(Vec2(c_poses[i].x/2+c_poses[i + 1].x/2, c_poses[i].y/2+c_poses[i + 1].y/2), "Ruler: " + dist(c_poses[i], c_poses[i + 1]));
	    }
	}
	_ {
	    for (let i = 0; i < plugins.length; ++i) {
		if (plugins[i] && plugins[i].show) {plugins[i].show(c_poses);}
	    }
	}
    }
}

fn snap_atom(object) {
    def EPSILON (8)
    match (object.type) {
	"line" {
	    if (dist(object.a, mouse_pos) < EPSILON) {
		mouse_pos = Vec2(object.a.x, object.a.y);
	    }
	    if (dist(object.b, mouse_pos) < EPSILON) {
		mouse_pos = Vec2(object.b.x, object.b.y);
	    }
	}
	"rect" {
	    if (dist(object.a, mouse_pos) < EPSILON) {
		mouse_pos = Vec2(object.a.x, object.a.y);
	    }
	    let o = Vec2(object.a.x+object.b.x, object.a.y+object.b.y);
	    if (dist(o, mouse_pos) < EPSILON) {
		mouse_pos = Vec2(o.x, o.y);
	    }
	    o = Vec2(object.a.x+object.b.x, object.a.y);
	    if (dist(o, mouse_pos) < EPSILON) {
		mouse_pos = Vec2(o.x, o.y);
	    }
	    o = Vec2(object.a.x, object.a.y+object.b.y);
	    if (dist(o, mouse_pos) < EPSILON) {
		mouse_pos = Vec2(o.x, o.y);
	    }
	}
	"polygon" {
	    for (let i = 0; i < object.points.length; ++i) {
		if (dist(object.points[i], mouse_pos) < EPSILON) {
		    mouse_pos = Vec2(object.points[i].x, object.points[i].y);
		}
	    }
	}
	_ {
	    for (let i = 0; i < plugins.length; ++i) {
		if (plugins[i] && plugins[i].snap) plugins[i].snap(object);
	    }
	}
    }
}

fn snap() {
    for (let i = 0; i < objects.length; ++i) {
        const object = objects[i];
	snap_atom(object);
    }
    if (curr_poses) {
	// BLA BLA BLA ...
    }
    
    for (let i = 0; i < plugins.length; ++i) {
	if (plugins[i] && plugins[i].snapEnd) plugins[i].snapEnd(object);
    }
    if (grid) {
	mouse_pos.x -= mouse_pos.x % grid;
	mouse_pos.y -= mouse_pos.y % grid;
    }
    undef EPSILON
}

fn updateFields() {
    for (let i = 0; i < plugins.length; ++i) {
	if (plugins[i] && plugins[i].updateFieldsStart) plugins[i].updateFieldsStart(object);
    }
    ruler.innerHTML = "MX: "+mouse_pos.x+" MY: "+mouse_pos.y+"<br>Selected: "+(selected+1)+"/"+objects.length;
    actionsel.innerHTML = "";
    for (let i = 0; i < objects.length; ++i) {
        const object = objects[i];
	actionsel.innerHTML += "[" + (i == selected ? "X" : " ") + "] ";
	match (object.type) {
	    "rect" {
	        actionsel.innerHTML += "RECT(a: "+object.a.x+";"+object.a.y+", b: "+object.b.x+";"+object.b.y+")<br>";
	    }
	    "line" {
	        actionsel.innerHTML += "LINE(a: "+object.a.x+";"+object.a.y+", b: "+object.b.x+";"+object.b.y+")<br>";
	    }
	    "circle" {
	        actionsel.innerHTML += "CIRCLE(a: "+object.a.x+";"+object.a.y+", r: "+object.r+")<br>";
	    }
	    "polygon" {
	        actionsel.innerHTML += "POLYGON(TODO)<br>";
	    }
	    "ruler" {
	        actionsel.innerHTML += "RULER(" + dist(object.a, object.b) + ")<br>";
	    }
	    _ {
		for (let i = 0; i < plugins.length; ++i) {
		    if (plugins[i] && plugins[i].updateFields) plugins[i].updateFields(object);
		}
	    }
	}
    }
}

fn setStrokeColor(color) {
    ctx.strokeStyle = color;
}
fn setFillColor(color) {
    ctx.fillStyle = color;
}
fn setColor(color) {
    setStrokeColor(color);
    setFillColor(color);
}

fn snapToLine(a, b, p) {
    const ap = Vec2(p.x - a.x, p.y - a.y);
    const ab = Vec2(b.x - a.x, b.y - a.y);
    const ab2 = ab.x * ab.x + ab.y * ab.y;
    const dot = ap.x * ab.x + ap.y * ab.y;
    const t = Math.max(0, Math.min(1, dot / ab2));
    return Vec2(a.x + ab.x * t, a.y + ab.y * t);
}

fn drawByType() {
    if (draw_style == "stroke") ctx.stroke();
    elif (draw_style == "fill") ctx.fill();
}

fn drawText(a, text) {
    ctx.fillText(text, a.x, a.y);
}
fn drawLine(a, b) {
    ctx.beginPath();
    ctx.moveTo(a.x, a.y);
    ctx.lineTo(b.x, b.y);
    ctx.closePath();
    drawByType();
}
fn drawRect(pos, size) {
    ctx.beginPath();
    ctx.rect(pos.x, pos.y, size.x, size.y);
    ctx.closePath();
    drawByType();
}
fn drawCircle(center, r) {
    ctx.beginPath();
    ctx.arc(center.x, center.y, r, 0, 2 * Math.PI);
    ctx.closePath();
    drawByType();
}
fn drawTriangle(p1, p2, p3) {
    ctx.beginPath();
    ctx.moveTo(p1.x, p1.y);
    ctx.lineTo(p2.x, p2.y);
    ctx.lineTo(p3.x, p3.y);
    ctx.closePath();
    drawByType();
}
fn drawPoly(points) {
    if (points.length < 2) return;
    ctx.beginPath();
    ctx.moveTo(points[0].x, points[0].y);
    for (let i = 0; i < points.length; ++i) {
	ctx.lineTo(points[i].x, points[i].y);
    }
    ctx.closePath();
    drawByType();
}
fn clear() {
    ctx.reset();
}
fn dist(a, b) {
    return Math.sqrt((a.x-b.x)*(a.x-b.x) + (a.y-b.y)*(a.y-b.y));
}

fn handleKey(key, ctrl) {
    if (!ctrl) {
        match (key) {
            "1" {
                setFig("rect");
            }
            "2" {
                setFig("line");
            }
            "3" {
                setFig("circle");
            }
            "4" {
                setFig("polygon");
            }
	    "5" {
	        setFig("ruler");
	    }
            "Enter" {
                match (curr_fig) {
                    "rect" {
		        for (let i = 0; i < curr_poses.length - 1; i += 2) {
                            objects.push(Rect(curr_style, curr_color, "rect", false, curr_poses[i], Vec2(curr_poses[i + 1].x-curr_poses[i].x, curr_poses[i + 1].y-curr_poses[i].y)));
			}
                    }
                    "line" {
		        for (let i = 0; i < curr_poses.length - 1; i += 2) {
                            objects.push(Line(curr_style, curr_color, "line", false, curr_poses[i], curr_poses[i + 1]));
			}
                    }
                    "circle" {
		        for (let i = 0; i < curr_poses.length - 1; i += 2) {
                            objects.push(Circle(curr_style, curr_color, "circle", false, curr_poses[i], dist(curr_poses[i + 1], curr_poses[i])));
			}
                    }
		    "polygon" {
                        objects.push(Poly(curr_style, curr_color, "polygon", false, curr_poses));
		    }
                    "ruler" {
		        for (let i = 0; i < curr_poses.length - 1; i += 2) {
                            objects.push(Ruler(curr_style, curr_color, "ruler", true, curr_poses[i], curr_poses[i + 1]));
			}
                    }
		    _ {
			for (let i = 0; i < plugins.length; ++i) {
			    if (plugins[i] && plugins[i].enter) plugins[i].enter(curr_fig);
			}
		    }
                }
                curr_fig = null;
		curr_poses = [];
            }
	    "I" {
		prompt("Insert coord(example: \"500;200\"): ").then((s) => {
		    let splt = s.split(";");
		    curr_poses.push(Vec2(Number(splt[0]), Number(splt[1])));
		    redraw();
		    show();
		    updateFields();
		});
	    }
	    "C" {
	        curr_poses = [];
		curr_fig = null;
	    }
	    "s" {
	        curr_style = "stroke";
	    }
	    "f" {
	        curr_style = "fill";
	    }
	    "b" {
	        loadBackground();
	    }
            "[" {
                --selected;
            }
            "]" {
                ++selected;
            }
	    "G" {
		prompt("Grid size(0 - disables)").then((s) => {
		    grid = Number(s);
		    redraw();
		    show();
		    updateFields();
		});
	    }
	    "S" {
		prompt("Enter color:").then((res) => {
		    curr_color = res;
		    redraw();
		    show();
		    updateFields();
		});
	    }
	    "Backspace" {
	        objects.splice(selected, 1);
	    }
	    "a" {
	        objects[selected].style = curr_style;
	        objects[selected].color = curr_color;
	    }
	    "A" {
	        curr_style = objects[selected].style;
	        curr_color = objects[selected].color;
	    }
	    "q" {
	        const a = objects[selected];
		objects[selected] = objects[selected + 1];
		objects[selected + 1] = a;
	    }
	    "Z" {
		curr_poses.pop();
	    }
	    _ {
		for (let i = 0; i < plugins.length; ++i) {
		    if (plugins[i] && plugins[i].keyPress) {plugins[i].keyPress(key);}
		}
	    }
        }
    }
    else {
	for (let i = 0; i < plugins.length; ++i) {
	    if (plugins[i] && plugins[i].keyCtrlPress) {plugins[i].keyCtrlPress(key);}
	}
    }
    redraw();
    show();
    updateFields();
}

window.onkeydown = (ev) => {
    print(ev);
    handleKey(ev.key, ev.ctrlKey);
};

canvas.addEventListener("mouseenter", () => {
    is_mouse_over_canvas = true;
});
canvas.addEventListener("mouseleave", () => {
    is_mouse_over_canvas = false;
});


window.onmousemove = (ev) => {
    if (!is_mouse_over_canvas) return;
    mouse_pos.x = ev.clientX;
    mouse_pos.y = ev.clientY;
    snap();
    redraw();
    show();
    updateFields();
    setColor(curr_color);
    draw_style = "stroke";
    drawLine(mouse_pos, Vec2(mouse_pos.x + 8, mouse_pos.y + 8));
    setColor("black");
    draw_style = "fill";
    drawRect(mouse_pos, Vec2(1, 1));
    
    for (let i = 0; i < plugins.length; ++i) {
	if (plugins[i] && plugins[i].onMouseMove) {plugins[i].onMouseMove(mouse_pos);}
    }
};
window.onmousedown = (ev) => {
    if (!is_mouse_over_canvas) return;
    curr_poses.push(Vec2(mouse_pos.x, mouse_pos.y));
    snap();
    redraw();
    show();
    updateFields();
    setColor(curr_color);
    draw_style = "stroke";
    drawLine(mouse_pos, Vec2(mouse_pos.x + 8, mouse_pos.y + 8));
    setColor("black");
    draw_style = "fill";
    drawRect(mouse_pos, Vec2(1, 1));
    
    for (let i = 0; i < plugins.length; ++i) {
	if (plugins[i] && plugins[i].onMouseDown) {plugins[i].onMouseDown(mouse_pos);}
    }
};
